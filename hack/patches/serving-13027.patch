From 2b2ce87a13b1a171556823150e3450a6c655f33e Mon Sep 17 00:00:00 2001
From: Matt Moore <mattmoor@chainguard.dev>
Date: Sun, 12 Jun 2022 13:49:55 -0700
Subject: [PATCH] Carry patch for https://github.com/knative/serving/pull/13027

---
 .../serverlessservice/serverlessservice.go    | 62 ++++++++++---------
 1 file changed, 34 insertions(+), 28 deletions(-)

diff --git a/vendor/knative.dev/serving/pkg/reconciler/serverlessservice/serverlessservice.go b/vendor/knative.dev/serving/pkg/reconciler/serverlessservice/serverlessservice.go
index 660b38f..c204f64 100644
--- a/vendor/knative.dev/serving/pkg/reconciler/serverlessservice/serverlessservice.go
+++ b/vendor/knative.dev/serving/pkg/reconciler/serverlessservice/serverlessservice.go
@@ -209,48 +209,54 @@ func (r *reconciler) reconcilePublicEndpoints(ctx context.Context, sks *netv1alp
 	if err != nil {
 		return fmt.Errorf("failed to get private K8s Service endpoints: %w", err)
 	}
+
 	// We still might be "ready" even if in proxy mode,
 	// if proxy mode is by means of burst capacity handling.
 	pvtReady := presources.ReadyAddressCount(pvtEps)
-	if pvtReady > 0 {
-		foundServingEndpoints = true
+	sharedReady := presources.ReadyAddressCount(activatorEps)
+
+	logger.Infof("SKS is in %s mode; has %d endpoints in %s; %d activator endpoints",
+		sks.Spec.Mode, pvtReady, psn, sharedReady)
+
+	// Spew is expensive and there might be a lof of endpoints.
+	if dlogger.Core().Enabled(zap.DebugLevel) {
+		dlogger.Debug("Private endpoints: " + spew.Sprint(pvtEps.Subsets))
+		dlogger.Debug(fmt.Sprintf("Subset of activator endpoints (needed %d): %s",
+			sks.Spec.NumActivators, spew.Sprint(activatorEps)))
 	}

 	// The logic below is as follows:
+	// mode = sks.Spec.Mode
+	// if len(private_service_endpoints) == 0:
+	//    // Override the mode to Proxy if the service has no endpoints
+	//    mode = Proxy
+	// if len(activator_endpoints) < sks.Spec.NumActivators:
+	//    // Override the mode to Serve if the shared activator has insufficient
+	//    // endpoints.
+	//    mode = Serve
+	//
 	// if mode == serve:
-	//   if len(private_service_endpoints) > 0:
-	//     srcEps = private_service_endpoints
-	//   else:
-	//     srcEps = subset(activator_endpoints)
+	//    srcEps = private_service_endpoints
 	// else:
 	//    srcEps = subset(activator_endpoints)
 	// The reason for this is, we don't want to leave the public service endpoints empty,
 	// since those endpoints are the ones programmed into the VirtualService.
-	//
-	switch sks.Spec.Mode {
+	mode := sks.Spec.Mode
+	if pvtReady == 0 {
+		logger.Info("Forcing SKS into Proxy mode, insufficient ready endpoints.")
+		mode = netv1alpha1.SKSOperationModeProxy
+	} else {
+		foundServingEndpoints = true
+	}
+	if sharedReady == 0 {
+		logger.Info("Forcing SKS into Serve mode, insufficient activator endpoints.")
+		mode = netv1alpha1.SKSOperationModeServe
+	}
+	switch mode {
 	case netv1alpha1.SKSOperationModeServe:
-		// We should have successfully reconciled the private service if we're here
-		// which means that we'd have the name assigned in Status.
-		if dlogger.Core().Enabled(zap.DebugLevel) {
-			// Spew is expensive and there might be a lof of endpoints.
-			dlogger.Debug("Private endpoints: " + spew.Sprint(pvtEps.Subsets))
-		}
-		// Serving but no ready endpoints.
-		logger.Infof("SKS is in Serve mode and has %d endpoints in private service %s", pvtReady, psn)
-		if foundServingEndpoints {
-			// Serving & have endpoints ready.
-			srcEps = pvtEps
-		} else {
-			srcEps = subsetEndpoints(activatorEps, sks.Name, int(sks.Spec.NumActivators))
-		}
+		srcEps = pvtEps
 	case netv1alpha1.SKSOperationModeProxy:
-		dlogger.Debug("SKS is in Proxy mode")
 		srcEps = subsetEndpoints(activatorEps, sks.Name, int(sks.Spec.NumActivators))
-		if dlogger.Core().Enabled(zap.DebugLevel) {
-			// Spew is expensive and there might be a lof of  endpoints.
-			dlogger.Debug(fmt.Sprintf("Subset of activator endpoints (needed %d): %s",
-				sks.Spec.NumActivators, spew.Sprint(pvtEps)))
-		}
 	}

 	sn := sks.Name
--
2.29.2

